#################################################
#
#         PERSON
#
#################################################
person:
  template:
    - base
    - circle
  state_display: >
    [[[ return variables.state === 'home' ? 'Ja' : 'Nej'; ]]]
  triggers_update: sensor.time
  styles:
    custom_fields:
      icon:
        - clip-path: circle()
        - width: 79%
        - pointer-events: none
        - display: flex
  custom_fields:
    icon: >
      [[[ return entity === undefined || `<img src="${states[entity.entity_id].attributes.entity_picture}" width="100%">`; ]]]
    circle: >
      [[[
        const time = c => {
          const s = (c / 1000);
          const m = (c / (1000 * 60));
          const h = (c / (1000 * 60 * 60));
          const d = (c / (1000 * 60 * 60 * 24));
          if (s < 60) {
            return parseInt(s) + 's';
          } else if (m < 60) {
            return parseInt(m) + 'm';
          } else if (h < 24) {
            return parseInt(h) + 'h';
          } else {
            return parseInt(d) + 'd';
          }
        };
        let last_changed = entity === undefined || time(Date.now() - Date.parse(states[entity.entity_id].last_changed));
        const stroke_color = variables.state === 'home' ? '#b2b2b2' : '#313638';
        const fill_color = variables.state === 'home' ? 'none' : '#FFFFFF08';
        return `
          <svg viewBox="0 0 50 50">
            <style>
              circle {
                transform: none;
                transform-origin: none;
                stroke-dasharray: none;
                stroke-dashoffset: none;
              }
            </style>
            <circle cx="25" cy="25" r="20.5" stroke="${stroke_color}" stroke-width="1.5" fill="${fill_color}" />
            <text x="50%" y="54%" fill="#8d8e90" font-size="14" text-anchor="middle" alignment-baseline="middle" dominant-baseline="middle">${last_changed}</text>
          </svg>
        `;
      ]]]