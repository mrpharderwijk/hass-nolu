# lovelace_gen
{% set default_grid_gap = '3vw' %}
{% set default_font_size = '16px' %}

{% for name, data in _global.custom_config.items() %}
- path: {{ name }}
  icon: {{ data.icon|default('mdi:home') }}
  visible: {{ data.show_in_navbar|default('false') }}

  #################################################
  #         TITLE
  #################################################
  {% if data.title is defined %}
  title: {{ data.title }}
  {% else %}
  title: {{ name|replace("_", " ")|title }}
  {% endif %}

  #################################################
  #         ROOT
  #
  # Defines the root element with some main padding
  #################################################
  type: custom:mod-card
  style: !include includes/styles/root.styles.yaml
  card:
    type: custom:layout-card
    layout_type: custom:grid-layout
    layout:
      grid-template-rows: auto
      grid-template-areas: |
        'main'
    panel: true
    cards:
      #################################################
      #         MAIN
      #################################################
      - type: custom:mod-card
        style: !include includes/styles/main.styles.yaml
        card:
          type: vertical-stack
          cards:
            #################################################
            #         HEADER
            #################################################
            {% if ((data.show_header is defined) and (data.show_header == true)) or
              (data.show_header is not defined) %}
            - !include includes/main_header/main_header.card.yaml
            {% endif %}

            #################################################
            #         CONTENT
            #################################################
            - type: custom:mod-card
              style: !include includes/styles/default_content.styles.yaml
              card:
                type: custom:layout-card
                layout_type: custom:grid-layout
                layout: !include includes/styles/default_content.layout.yaml
                cards:
                  #################################################
                  #         ROWS
                  #################################################
                  {% if data.rows is defined %}
                  {% for row in data.rows %}
                  - type: custom:mod-card
                    style: !include includes/styles/row_default.styles.yaml
                    card:
                      type: grid
                      {% if row.title is defined %}
                      title: {{ row.title }}
                      {% endif %}
                      columns: 6
                      cards:
                        {% if row.widgets is defined %}
                        {% for widget in row.widgets %}
                        #################################################
                        #         WIDGETS
                        #################################################

                        #################################################
                        #         WEATHER
                        #################################################
                        {% if widget.type == 'default_weather' %}
                        - !include
                          - includes/widgets/weather_widget.llg.yaml
                          - widget_entity: {{ widget.entity }}



                        #################################################
                        #         ENERGY / TEMPERATURE / HUMIDITY
                        #################################################
                        {% elif widget.type == 'energy' or
                                widget.type == 'temperature' or
                                widget.type == 'humidity' %}
                        - !include
                          - includes/widgets/graph_climate_widget.llg.yaml
                          - widget_entity: {{ widget.entity }}
                            widget_name: {{ widget.name }}
                            widget_type: {{ widget.type }}
                            widget_icon: {{ widget.icon }}



                        #################################################
                        #         LIGHT / CLIMATE / BINARY / CAMERA
                        #################################################
                        {% elif widget.type == 'light' or
                                widget.type == 'climate' or
                                widget.type == 'binary' or
                                widget.type == 'camera' %}
                        - !include
                          - includes/widgets/button_default_widget.llg.yaml
                          - widget_entity: {{ widget.entity }}
                            widget_name: {{ widget.name }}
                            widget_template: {{ widget.template }}



                        #################################################
                        #         POWER_PLUG
                        #################################################
                        {% elif widget.type == 'power_plug' %}
                        - !include
                          - includes/widgets/power_plug_widget.llg.yaml
                          - widget_name: {{ widget.name }}
                            widget_lock: {{ widget.lock }}
                            {% if widget.entity is defined %}
                            widget_entity: {{ widget.entity }}
                            {% endif %}
                            
                            # GRAPH ENTITIES
                            {% if (widget.graph_entities is defined) %}
                            widget_graph_entities: 
                            {% for graph_entity in widget.graph_entities %}
                              - entity: {{ graph_entity.entity }}
                                # SHOW_STATE
                                {% if graph_entity.show_state is defined and
                                  graph_entity.show_state is sameas true %}
                                show_state: true
                                {% else %}
                                show_state: false
                                {% endif %}

                                # SHOW_GRAPH
                                {% if graph_entity.show_graph is defined and
                                  graph_entity.show_graph is sameas true %}
                                show_graph: true
                                {% else %}
                                show_graph: false
                                {% endif %}

                                # SHOW_LINE
                                {% if (graph_entity.show_line is defined and
                                  graph_entity.show_line is sameas true) or 
                                  graph_entity.show_line is not defined %}
                                show_line: true
                                {% else %}
                                show_line: false
                                {% endif %}

                                # SHOW_FILL
                                {% if graph_entity.show_fill is defined and
                                  graph_entity.show_fill is sameas true %}
                                show_fill: true
                                {% else %}
                                show_fill: false
                                {% endif %}
                            {% endfor %}
                            {% endif %}


                            
                        #################################################
                        #         MINI MEDIA PLAYER
                        #################################################
                        {% elif widget.type == 'mini_media_player' %}
                        - type: custom:mini-media-player
                          entity: {{ widget.entity }}
                          style:
                            .: |
                              ha-card {
                                border-radius: 1rem;
                                overflow: hidden !important;
                              }
                              ha-card .mmp__bg,
                              ha-card[artwork*="full-cover"].--has-artwork .mmp-player,
                              ha-card .mmp-player,
                              ha-card .mmp__container {
                                border-radius: 1rem;
                                overflow: hidden !important;
                              }
                          artwork: 'full-cover'
                          hide:
                            power: true
                            icon: true
                            source: true
                            info: true
                          tap_action:
                            action: 'fire-dom-event'
                            browser_mod:
                              command: 'popup'
                              title: 'Media Player'
                              card:
                                type: 'custom:mini-media-player'
                                entity: {{ widget.entity }}
                                hide:
                                  icon: true

                                {% if (widget.speaker_group is defined) %}
                                speaker_group:
                                  platform: {{ widget.speaker_group.platform }}

                                  {% if (widget.speaker_group.show_group_count is defined) %}
                                  show_group_count: {{ widget.speaker_group.show_group_count }}
                                  {% endif %}

                                  entities:
                                    {% if widget.speaker_group.entities is defined %}
                                      {% for entity in widget.speaker_group.entities %}
                                    - entity_id: {{ entity.entity_id }}
                                      name: {{ entity.name }}
                                      {% endfor %}
                                    {% endif %}
                                {% endif %}
                        {#
                          !WARNING - BROKEN!
                            TODO: make an include for this
                        - !include
                          - includes/widgets/media_player_widget.llg.yaml
                          - widget_entity: {{ widget.entity }}
                            widget_speaker_group_platform: {{ widget.speaker_group }}
                            widget_speaker_group_show_group_count: {{ widget.show_group_count }}
                            widget_speaker_group_entities: {{ widget.speaker_group.entities }}
                        #}


                        #################################################
                        #         MARKDOWN
                        #################################################
                        {% elif widget.type == 'markdown' %}
                        - !include
                          - includes/widgets/markdown_widget.llg.yaml
                          - widget_content: {{ widget.content }}
                            {% if (widget.background_color is defined) %}
                            widget_background_color: {{ widget.background_color }}
                            {% else %}
                            widget_background_color: 'var(--nolu-background-color-inactive, rgb(22, 22, 22))'
                            {% endif %}

                            {% if (widget.text_color is defined) %}
                            widget_text_color: {{ widget.text_color }}
                            {% else %}
                            widget_text_color: 'var(--nolu-color-inactive, rgb(245, 245, 245))'
                            {% endif %}

                        #################################################
                        #         CUSTOM_ENTITIES
                        #################################################
                        {% elif widget.type == 'custom_entities' %}
                        - type: custom:mod-card
                          style:
                            .: |
                              :host {
                                align-items: center;
                                background-color: var(--nolu-background-color-dark-transparent, rgba(0, 0, 0, 0.5));
                                border-radius: 1rem;
                                display: flex;
                                {% if (col_span is defined) %}
                                  {% if col_span is number and col_span > 1 %}
                                grid-column: span {{ col_span }};

                                  {% elif col_span is string %}
                                    {% if col_span == 'full'%}
                                grid-column: 1 / -1 !important;

                                    {% endif %}
                                  {% endif%}
                                {% endif %}
                                justify-content: center;
                                padding: 1rem !important;
                              }
                              #states {
                                padding: 0;
                              }
                            hui-vertical-stack-card$: |
                              #root > *:not(:first-child) {
                                margin-top: 1.5rem !important;
                              }
                          card:
                            type: vertical-stack
                            cards:

                              # FIXME: couldn't use entities for some reason?
                              {% for entity_item in widget.entity_list %}
                              #################################################
                              #         ENTITY
                              #################################################
                              - type: custom:mod-card
                                style:
                                  hui-horizontal-stack-card$: |
                                    #root {
                                      align-items: center;
                                      justify-content: center;
                                    }
                                    #root > * {
                                      margin-right: 0 !important;
                                    }
                                card:
                                  type: horizontal-stack
                                  cards:
                                    #################################################
                                    #         BUTTON
                                    #################################################
                                    - type: custom:button-card
                                      entity: {{ entity_item.entity }}
                                      name: {{ entity_item.name }}
                                      icon: {{ entity_item.icon }}
                                      template:
                                        - round_icon

                                    #################################################
                                    #         TITLE
                                    #################################################
                                    - type: markdown
                                      style:
                                        .: |
                                          :host {
                                            margin-left: 1rem !important;
                                          }
                                          ha-card {
                                            background-color: transparent !important;
                                            outline: 0 !important;
                                            box-shadow: none !important;
                                          }
                                          ha-markdown {
                                            padding: 0 !important;
                                          }
                                        ha-markdown$: |
                                          ha-markdown-element > * {
                                            font-weight: 300 !important;
                                          }
                                          ha-markdown-element h1 {
                                            color: var(--nolu-color-white, rgb(245, 245, 245));
                                            font-size: 1.25rem;
                                            line-height: 1rem !important;
                                            margin: 0 0 .75rem 0 !important;
                                          }
                                          ha-markdown-element h2 {
                                            color: var(--nolu-color-gray-lighter, rgb(151, 151, 151));
                                            font-size: 1rem !important;
                                            line-height: 0.85rem !important;
                                            margin: 0 !important;
                                            text-transform: capitalize;
                                          }
                                      content: |
                                        # {{ entity_item.name }}
                                        {# ## {{ states({{ entity_item.entity }}) }} #}
                              {% endfor %}

                        #################################################
                        #         FALLBACK
                        #################################################
                        {% else %}
                        - type: markdown
                          content: |
                            ## just a markdown
                        {% endif %}

                        {% endfor %}
                        {% endif %}
                  {% endfor %}

                  #################################################
                  #         ROWS NOT DEFINED
                  #         TODO: create option to not define rows
                  #################################################
                  {% else %}
                  - type: custom:mod-card
                    style: !include includes/styles/row_default.styles.yaml
                    card:
                      type: grid
                      title:
                      columns: 6
                      cards:
                        - type: markdown
                          content: |
                            ## just a markdown
                  {% endif %}
{% endfor %}
