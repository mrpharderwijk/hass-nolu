# lovelace_gen

{#
 # DEFAULT OPTIONS
 #}
type: 'custom:button-card'
entity: {{ widget_entity }}
variables:
  entity_state: |
    [[[
      return entity && entity.state
        ? entity.state
        : null;
    ]]]
  
  {% if widget_battery is defined %}
  battery_entity: true
  {% endif %}

  {% if widget_graph is defined %}
  graph_entity: true
  {% endif %}

{% if widget_name is defined %}
name: {{ widget_name }}
{% else %}
show_name: false
{% endif %}

{% if widget_show_last_changed is defined %}
show_last_changed: {{ widget_show_last_changed }}
{% endif %}

{% if widget_type == 'camera' %}
show_live_stream: false
{% endif %}

{% if (widget_lock is defined) and (widget_lock is true) %}
lock:
  enabled: true
{% endif %}

{#
 # ICON
 #}
{% if widget_icon is defined %}

{% if 'state:radiator' in widget_icon %}
icon: |
  [[[
    return variables && variables.entity_state && variables.entity_state === 'on'
      ? 'mdi:radiator'
      : 'mdi:radiator-disabled'
  ]]]
{% else %}
icon: {{ widget_icon }}
{% endif %}

{% else %}
{#
 # DEFAULT ICON BEHAVIOR FOR DIFFERENT WIDGET TYPES
 #}
{% if widget_type == 'humidity' %}
icon: 'mdi:water-outline'
tap_action:
  action: more-info
{% elif widget_type == 'power_plug' %}
icon: |
  [[[
    return variables && variables.entity_state && variables.entity_state === 'on'
      ? 'mdi:power-plug-outline'
      : 'mdi:power-plug-off-outline';
  ]]]
{% elif widget_type == 'temperature' %}
icon: 'mdi:thermometer'
tap_action:
  action: more-info

{% elif widget_type == 'thermostat' %}
icon: 'mdi:thermostat'

{% else %}
show_icon: false
{% endif %}

{% endif %}

{#
 # ICON
 #}
{% if (widget_lock is defined) and
  (widget_lock is true) %}
lock:
  enabled: true
{% endif %}

{#
 # TEMPLATES
 #}
{% if (widget_template is defined) %}
template:
  {% for template in widget_template %}
  - {{ template }}
  {% endfor %}
{% endif %}

{# --------------- SPECIFIC OPTIONS --------------- #}

{#
 # CAMERA OPTIONS
 #}
{% if (widget_type == 'camera') and
 (widget_show_live_stream is true) %}
show_live_stream: false
{% endif %}

{#
 # EMBEDDED ENTITIES
 # The extra_styles is used to place the embedded entities. When using embedded
 # entities make sure you create a variable in the `variables` section for the
 # entity as well. This way you can add specific styles for that entity in the
 # `extra_styles` section conditionally
 #}
{% if (widget_battery is defined) or
  (widget_graph is defined) %}
extra_styles: |
  [[[
    let extraStyles = '';

    if (variables) {
      if (variables.battery_entity) {
        extraStyles = `
          ha-card #battery {
            grid-area: unset !important;
            pointer-events: none !important;
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
          }
        `;
      }

      if (variables.graph_entity) {
        extraStyles += `
          ha-card #graph {
            grid-area: unset !important;
            pointer-events: none !important;
          }
          ha-card #state {
            display: ${entity && entity.state ? `none !important` : `block !important`};
          }
        `;
      }
    }

    return extraStyles;
  ]]]

custom_fields:
  {% if widget_battery is defined and
    widget_battery.entity is defined %}
  battery:
    card:
      style:
        .: |
          :host {
            padding: 0 !important;
            position: absolute !important;
            right: 10%;
            top: 50px;
          }
          ha-card {
            padding: 0 !important;
          }
      type: 'custom:button-card'
      entity: {{ widget_battery.entity }}
      variables:
        {% if widget_battery.visibility is defined %}
        visibility: {{ widget_battery.visibility }}
        {% endif %}

        {% if widget_battery.show_percentage is defined %}
        show_percentage: {{ widget_battery.show_percentage }}
        {% endif %}

        # `main_state`
        # Needed to pass the state to the template and style the color on active/non-active
        main_state: |
          [[[
            const onStates = ['on', 'home', 'active', 'enabled', 'heat', 'cool', 'open'];
            return entity && entity.state && onStates.some(state => state === entity.state) ? true : false;
          ]]]
        
      template:
        - 'embed_battery_icon'
  {% endif %}

  {% if widget_graph is defined and
    widget_graph.entity is defined %}
  graph:
    card:
      type: 'custom:mini-graph-card'
      entities:
        - entity: {{ widget_graph.entity }}
          show_state: true
          show_graph: true
          show_line: true
          show_fill: false
      decimals: 1
      hours_to_show: {{ widget_graph.hours_to_show }}
      points_per_hour: 0.25
      line_color: {{ widget_graph.line_color }}
      show:
        name: false
        icon: false
        labels: false
        labels_secondary: false
        average: false
        points: false
      align_icon: 'left'
      align_state: 'right'
      style: !include ../styles/graph_embedded.styles.yaml
      state_map:
        - value: 0.0
          label: 'off'
  {% endif %}
{% endif %}
